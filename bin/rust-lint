#!/usr/bin/env bash

# Exit immediately if a command exits with a non-zero status
set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Default values
CHECK_ONLY=false
FILES_SPECIFIED=false
SPECIFIC_FILES=""

# Function to show usage
show_usage() {
    echo "Usage: $0 [OPTIONS] [FILES...]"
    echo ""
    echo "Options:"
    echo "  --check-only    Check formatting without applying changes"
    echo "  --help          Show this help message"
    echo ""
    echo "Examples:"
    echo "  $0                         # Format all Rust files"
    echo "  $0 --check-only            # Check all Rust files"
    echo "  $0 src/lib.rs src/main.rs  # Format specific files"
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --check-only)
            CHECK_ONLY=true
            shift
            ;;
        --help)
            show_usage
            exit 0
            ;;
        -*)
            echo -e "${RED}Unknown option: $1${NC}"
            show_usage
            exit 1
            ;;
        *)
            FILES_SPECIFIED=true
            SPECIFIC_FILES="$SPECIFIC_FILES $1"
            shift
            ;;
    esac
done

echo -e "${BLUE}Running Rust linting...${NC}"

# Function to run rustfmt
run_rustfmt() {
    if [ "$FILES_SPECIFIED" = true ]; then
        # Format specific files
        RUST_FILES=$(echo $SPECIFIC_FILES | tr ' ' '\n' | grep '\.rs$' || true)
        if [ -n "$RUST_FILES" ]; then
            if [ "$CHECK_ONLY" = true ]; then
                echo -e "${BLUE}Checking formatting of specific Rust files...${NC}"
                echo "$RUST_FILES" | xargs rustfmt --edition 2021 --check
            else
                echo -e "${BLUE}Formatting specific Rust files...${NC}"
                echo "$RUST_FILES" | xargs rustfmt --edition 2021
            fi
        else
            echo -e "${YELLOW}No Rust files specified.${NC}"
            return 0
        fi
    else
        # Format all files
        if [ "$CHECK_ONLY" = true ]; then
            echo -e "${BLUE}Checking formatting of all Rust files...${NC}"
            cargo fmt --all -- --check
        else
            echo -e "${BLUE}Formatting all Rust files...${NC}"
            cargo fmt --all
        fi
    fi
}

# Function to run clippy
run_clippy() {
    echo -e "${BLUE}Running clippy...${NC}"
    
    if [ "$FILES_SPECIFIED" = true ]; then
        # Run clippy on the whole workspace even for specific files
        # because clippy works better at the crate level
        echo -e "${YELLOW}Note: Clippy runs on the entire workspace for consistency.${NC}"
    fi
    
    cargo clippy --all-targets --all-features -- -D warnings
}

# Function to run cargo doc check
run_doc_check() {
    echo -e "${BLUE}Checking documentation...${NC}"
    RUSTDOCFLAGS="-D warnings" cargo doc --no-deps --all-features --quiet
}

# Run the linting steps
EXIT_CODE=0

echo -e "${BLUE}Step 1: Formatting${NC}"
if ! run_rustfmt; then
    echo -e "${RED}rustfmt failed${NC}"
    EXIT_CODE=1
fi

echo -e "${BLUE}Step 2: Linting${NC}"
if ! run_clippy; then
    echo -e "${RED}clippy failed${NC}"
    EXIT_CODE=1
fi

echo -e "${BLUE}Step 3: Documentation${NC}"
if ! run_doc_check; then
    echo -e "${RED}doc check failed${NC}"
    EXIT_CODE=1
fi

# Summary
if [ $EXIT_CODE -eq 0 ]; then
    echo -e "${GREEN}✅ All Rust linting checks passed!${NC}"
else
    echo -e "${RED}❌ Some Rust linting checks failed.${NC}"
fi

exit $EXIT_CODE